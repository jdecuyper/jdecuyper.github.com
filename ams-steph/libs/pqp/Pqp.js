Pqp = new Object();Pqp.CALL_ID = -1;Pqp.trace = function(xValue){  Tristesse.trace(xValue);}Pqp.makeFlashButton = function(mc,callback){  var o = Pqp._globalOrContextualized(callback);  var button = new SimpleButton(mc,o);}Pqp.isIE = function(){  if (jQuery.browser.msie){    return true;  }	return false;}Pqp.addClick = function(mc,callback,oBag,lHand){  var o = Pqp._globalOrContextualized(callback);  mc.on("click",{ct:o,bag:oBag},Pqp._onClick);  mc.css('cursor', 'pointer');}Pqp.removeClick = function(mc){  mc.off("click",Pqp._onClick);  mc.css('cursor', 'auto');}Pqp.geta = function(a) {  if (a instanceof String){    return [a];  }else if (typeof(a)=="string"){    return [a];  }else if (a instanceof Array){    return a;  }  return [a];}Pqp.isString = function(a){  if ((a instanceof String) || (typeof(a)=="string")){    return true;  }  return false;}Pqp.isNumber = function(a){  if ((a instanceof Number) || (typeof(a)=="number")){    return true;  }  return false;}Pqp.isArray = function(a){  if ((a instanceof Array) || (typeof(a)=="array")){    return true;  }  return false;}Pqp.isNull = function(xValue){  if ((xValue == null) || (xValue == undefined)){    return true;  }  return false;}Pqp.makeGetQueryString = function(o){  var s = "";  for (var a in o){    s+= a+"="+o[a]+"&";  }  return s;}Pqp._onClick = function(e){  var o = e.data.ct;  e.pqpbag = o;  e.bag = e.data.bag;  if (o.callback != undefined){    if (o.ct != undefined){      // callback con contesto      o.callback.call(o.ct,e);    }else{      // funzione normale      o.callback.call(null,e);    }  }  }Pqp.sendAndLoad = function(sPath,oData,callback,oBag,customParam){  // Restituisce a callback lSuccess,[oJson,error],oBag,additionalData  var oCall = new Object();  // Defaults  oCall.type = "GET";  oCall.dataType = "xml";  // Url  oCall.url = sPath;  // Dati da passare  if (oData){    oCall.data = oData;  }    // Callback  var o = Pqp._globalOrContextualized(callback);    if (o.callback){    oCall.success = Pqp._snlSuccess;    oCall.error = Pqp._snlError;    oCall.callback = o;  }    // Eventuale bag (altrimenti la crea)  var bag  if (oBag){    bag = new Bag(oBag);  }else{    var o = new Object();    bag = new Bag(o);  }  bag.callID = Pqp._getNextCallId();  if (callback.ct){    bag.ct = callback.ct;  }  oCall.bag = bag;    // Eventuali parametri da sovrascrivere  if (customParam){    for (var a in customParam){      oCall[a] = customParam[a];    }  }  // Effettua la chiamata  $.ajax(oCall);  return oCall.callID;}Pqp.shuffle = function(o){ 	for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);	return o;};Pqp.rnd = function(max,min){  if (!min){     min = 0;  }  var randomNum = Math.floor(Math.random() * (max - min + 1)) + min;  return randomNum;}Pqp._globalOrContextualized = function(callback){  var o;  if (callback instanceof Function){    o = new Object();    o.callback = callback;    o.ct = undefined;  }else{    if (callback != undefined){      o = callback;    }else{      // nessuna funzione      o = new Object();      o.callback = undefined;      o.ct = undefined;    }  }  return o;}Pqp._callCallback = function(callback,oBag){  if (callback.ct){    // callback con contesto    callback.callback.call(callback.ct,oBag);  }else{    // funzione normale    callback.callback.call(null,oBag);  }  }Pqp._getNextCallId = function(){  Pqp.CALL_ID++;  return Pqp.CALL_ID;}Pqp._snlSuccess = function(data, textStatus, jqXHR){  var o = $.xml2json(data);  Pqp._snlCallback(true,o,this,textStatus,jqXHR);}Pqp._snlError = function(jqXHR, textStatus, errorThrown){  Pqp._snlCallback(false,errorThrown,this,textStatus,jqXHR);}Pqp._snlCallback = function(lOkay,retVal,callContext,textStatus,jqXHR){  var o = callContext.callback;  var additionalData = new Object();  additionalData.textStatus = textStatus;  additionalData.jqXHR = jqXHR;    if (o.ct){    // callback con contesto    o.callback.call(o.ct,lOkay,retVal,callContext.bag,additionalData);  }else{    // funzione normale    o.callback.call(null,lOkay,retVal,callContext.bag,additionalData);  }  }Pqp.check = function(nProb){   if (nProb>=1){      return true;   }   if (nProb<=0){      return false;   }   var nSpace = 100000;   var nProd = (nProb*nSpace);   var nRnd = Pqp.range(0, nSpace);   return nRnd<nProd;}Pqp.range = function(nMin,nMax) { return (Pqp.rangeInt((nMin*1000.0),(nMax*1000.0)))/1000.0;}Pqp.rangeInt = function(nMin,nMax){	var nRnd = Math.floor(Math.random() * (nMax - nMin + 1)) + nMin;	return nRnd;}Pqp.replace = function(str,fnd,repl){	return Lng.safeReplace(str,fnd,repl);}